# Generated by Django 4.1.1 on 2023-04-19 03:47

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import peddleconcept.models.people

from django.contrib.auth.hashers import is_password_usable

rider_users_to_delete = []

def make_riders_people(apps, schema_editor):
    global rider_users_to_delete
    # move PeddleUser objects which are riders into the Person and PersonToken objects
    PeddleUser = apps.get_model('accounts', 'PeddleUser')
    Person = apps.get_model('peddleconcept', 'Person')
    PersonToken = apps.get_model('peddleconcept', 'PersonToken')
    RiderPaySlot = apps.get_model('peddleconcept', 'RiderPaySlot')
    TourRider = apps.get_model('peddleconcept', 'TourRider')
    db_alias = schema_editor.connection.alias

    user_id_to_person = {}
    users_to_delete = []

    users = PeddleUser.objects.using(db_alias)
    for user in users:

        if user.is_rider:
            rider_class = 'rider_standard'
            if user.rider_pay_rate == 25:
                rider_class = 'rider_probationary'
            elif user.rider_pay_rate == 33:
                rider_class = 'rider_senior'
            elif user.rider_pay_rate == 36:
                rider_class = 'rider_professional'
        else:
            rider_class = None
            
        person = Person(
            first_name = user.first_name,
            last_name = user.last_name,
            display_name = user.display_name,
            email = user.email or '',
            phone = user.phone or '',
            last_seen = user.last_login,
            active = user.is_active,
            abn = user.abn or '',
            bank_bsb = user.bank_bsb or '',
            bank_acct = user.bank_acct or '',
            override_pay_rate = user.rider_pay_rate,
            email_verified = False,
            rider_class = rider_class,
        )

        if is_password_usable(user.password) and user.username and user.is_active:
            person.user = user
        else:
            users_to_delete.append(user)

        person.save(using=db_alias)
        if user.login_token and not is_password_usable(user.password):
            PersonToken(
                person = person,
                action = 'login',
                valid_days = 0, # forever
                token = user.login_token,
            ).save(using=db_alias)

        user_id_to_person[user.id] = person
    
    for rps in RiderPaySlot.objects.using(db_alias).filter(rider__isnull=False):
        rps.person = user_id_to_person[rps.rider_id]
        rps.save(using=db_alias)
    
    for tr in TourRider.objects.using(db_alias).filter(rider__isnull=False):
        tr.person = user_id_to_person[tr.rider_id]
        tr.save()

    for u in users_to_delete:
        rider_users_to_delete.append(u.id)

    print('will delete users:', ', '.join((u.display_name for u in users_to_delete)))
    print('created Person objects:', ', '.join((p.name for p in Person.objects.using(db_alias).all())))

def delete_rider_users(apps, schema_editor):
    global rider_users_to_delete
    PeddleUser = apps.get_model('accounts', 'PeddleUser')
    db_alias = schema_editor.connection.alias

    PeddleUser.objects.using(db_alias).filter(id__in=rider_users_to_delete).delete()
    print('remaining Users:', ', '.join((u.username for u in PeddleUser.objects.using(db_alias).all())))

class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contenttypes", "0002_remove_content_type_name"),
        ("peddleconcept", "0001_initial_squashed"),
    ]

    operations = [
        migrations.CreateModel(
            name="Area",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source_row_id",
                    models.CharField(
                        blank=True,
                        help_text="External ID for this item (eg. Rezdy/Fringe booking number)",
                        max_length=300,
                    ),
                ),
                (
                    "source_row_state",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("live", "live"),
                            ("deleted", "deleted"),
                            ("none", "none"),
                        ],
                        default="live",
                        help_text="Whether the external data item exists (live) or has been deleted, eg. for a cancelled tour",
                        max_length=50,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("rezdy", "rezdy"),
                            ("fringe", "fringe"),
                            ("", ""),
                            ("auto", "auto"),
                            ("generate_sessions", "generate_sessions"),
                            ("generate_pay_report", "generate_pay_report"),
                            ("user", "user"),
                        ],
                        help_text="External data source",
                        max_length=50,
                    ),
                ),
                (
                    "field_auto_values",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="External/automatic values for each of the fields",
                    ),
                ),
                ("updated", models.DateTimeField(auto_now=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "area_name",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Area name in Deputy"
                    ),
                ),
                (
                    "display_name",
                    models.CharField(max_length=200, verbose_name="Area display name"),
                ),
                (
                    "colour",
                    models.CharField(max_length=50, verbose_name="Hex colour code"),
                ),
                (
                    "tour_locations",
                    models.JSONField(
                        default=list,
                        help_text="JSON list of strings being each tour pickup location included under this area",
                    ),
                ),
                ("sort_order", models.IntegerField(blank=True, default=0)),
                ("active", models.BooleanField(blank=True, default=True)),
                (
                    "deputy_sync_enabled",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="If enabled, the Area data and associated shifts are pushed to Deputy and can overwrite other changes",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ChangeLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_id", models.PositiveIntegerField()),
                (
                    "change_remote",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("rezdy", "rezdy"),
                            ("fringe", "fringe"),
                            ("deputy", "deputy"),
                            ("local-history", "local-history"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "change_type",
                    models.CharField(
                        choices=[
                            ("deleted", "deleted"),
                            ("undeleted", "undeleted"),
                            ("created", "created"),
                            ("changed", "changed"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("data", models.JSONField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                ("timestamp_saved", models.DateTimeField(auto_now_add=True)),
                (
                    "model_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source_row_id",
                    models.CharField(
                        blank=True,
                        help_text="External ID for this item (eg. Rezdy/Fringe booking number)",
                        max_length=300,
                    ),
                ),
                (
                    "source_row_state",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("live", "live"),
                            ("deleted", "deleted"),
                            ("none", "none"),
                        ],
                        default="live",
                        help_text="Whether the external data item exists (live) or has been deleted, eg. for a cancelled tour",
                        max_length=50,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("rezdy", "rezdy"),
                            ("fringe", "fringe"),
                            ("", ""),
                            ("auto", "auto"),
                            ("generate_sessions", "generate_sessions"),
                            ("generate_pay_report", "generate_pay_report"),
                            ("user", "user"),
                        ],
                        help_text="External data source",
                        max_length=50,
                    ),
                ),
                (
                    "field_auto_values",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="External/automatic values for each of the fields",
                    ),
                ),
                ("updated", models.DateTimeField(auto_now=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("first_name", models.CharField(max_length=200)),
                ("last_name", models.CharField(max_length=200)),
                (
                    "display_name",
                    models.CharField(max_length=200, verbose_name="Preferred Name"),
                ),
                ("email", models.EmailField(max_length=254)),
                ("email_verified", models.BooleanField(blank=True)),
                (
                    "phone",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="Contact Phone Number"
                    ),
                ),
                ("active", models.BooleanField(blank=True)),
                (
                    "abn",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="Contractor ABN"
                    ),
                ),
                (
                    "bank_bsb",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Bank account BSB"
                    ),
                ),
                (
                    "bank_acct",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Bank account number"
                    ),
                ),
                ("last_seen", models.DateTimeField(blank=True, null=True)),
                (
                    "rider_class",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("rider_probationary", "rider_probationary"),
                            ("rider_standard", "rider_standard"),
                            ("rider_senior", "rider_senior"),
                            ("rider_professional", "rider_professional"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("is_core_rider", models.BooleanField(blank=True, default=False)),
                (
                    "override_pay_rate",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Override pay rate for specific rider - LEAVE BLANK unless you are sure!",
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Allow this person to login directly with a username/password",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Username for login (Optional)",
                    ),
                ),
                (
                    "signup_status",
                    models.CharField(
                        choices=[
                            ("initial", "Signed up - has not confirmed email"),
                            ("confirmed", "Signed up - email confirmed"),
                            ("complete", "Signed up - all details completed"),
                        ],
                        default="initial",
                        max_length=20,
                    )
                )
            ],
            options={
                "abstract": False,
                "verbose_name_plural": "People",
            },
        ),
        migrations.CreateModel(
            name="PersonToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[("auth_email", "auth_email"), ("login", "login")],
                        max_length=20,
                    ),
                ),
                ("token", models.CharField(max_length=80, default=peddleconcept.models.people.get_random_token)),
                ("valid_from", models.DateTimeField(auto_now_add=True)),
                (
                    "valid_days",
                    models.PositiveIntegerField(
                        blank=True,
                        default=0,
                        verbose_name="Number of days token is valid",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="peddleconcept.person",
                    ),
                ),
            ],
            options = {
                "verbose_name": "Auth Token (Advanced)",
                "verbose_name_plural": "Auth Tokens (Advanced)",
            },
        ),
        migrations.CreateModel(
            name="Roster",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source_row_id",
                    models.CharField(
                        blank=True,
                        help_text="External ID for this item (eg. Rezdy/Fringe booking number)",
                        max_length=300,
                    ),
                ),
                (
                    "source_row_state",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("live", "live"),
                            ("deleted", "deleted"),
                            ("none", "none"),
                        ],
                        default="live",
                        help_text="Whether the external data item exists (live) or has been deleted, eg. for a cancelled tour",
                        max_length=50,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("rezdy", "rezdy"),
                            ("fringe", "fringe"),
                            ("", ""),
                            ("auto", "auto"),
                            ("generate_sessions", "generate_sessions"),
                            ("generate_pay_report", "generate_pay_report"),
                            ("user", "user"),
                        ],
                        help_text="External data source",
                        max_length=50,
                    ),
                ),
                (
                    "field_auto_values",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="External/automatic values for each of the fields",
                    ),
                ),
                ("updated", models.DateTimeField(auto_now=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("time_start", models.DateTimeField(default=django.utils.timezone.now)),
                ("time_end", models.DateTimeField(default=django.utils.timezone.now)),
                ("meal_break_mins", models.PositiveIntegerField(blank=True, default=0)),
                ("rest_break_mins", models.PositiveIntegerField(blank=True, default=0)),
                ("open_shift", models.BooleanField(blank=True, default=False)),
                (
                    "warning",
                    models.TextField(
                        blank=True,
                        help_text="Warning message from Deputy if chosen person is not preferred",
                    ),
                ),
                (
                    "published",
                    models.BooleanField(
                        blank=True, default=False, verbose_name="Publish in Deputy"
                    ),
                ),
                ("shift_notes", models.TextField(blank=True, default=True)),
                ("shift_confirmed", models.BooleanField(blank=True, default=True)),
                (
                    "timesheet_locked",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date/Time when timesheet was created for this shift",
                        null=True,
                    ),
                ),
                (
                    "area",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="peddleconcept.area",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        blank=True,
                        help_text="Person rostered to this shift - may be blank for Open or Empty shift.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="peddleconcept.person",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RosterTour",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rider_role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("tour-lead", "tour-lead"),
                            ("tour-colead", "tour-colead"),
                            ("rider", "rider"),
                        ],
                        max_length=20,
                    ),
                ),
                ("tour_order", models.PositiveIntegerField(blank=True, default=0)),
                (
                    "roster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="peddleconcept.roster",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ScheduledTask",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "task_state",
                    models.CharField(
                        choices=[
                            ("disabled", "disabled"),
                            ("pending", "pending"),
                            ("running", "running"),
                            ("error", "error"),
                            ("timeout", "timeout"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "last_run_time",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "last_finish_time",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("last_run_message", models.TextField(blank=True)),
                ("last_run_log", models.TextField(blank=True)),
                (
                    "run_interval_minutes",
                    models.PositiveIntegerField(blank=True, default=30),
                ),
                (
                    "run_timeout_minutes",
                    models.PositiveIntegerField(blank=True, default=2),
                ),
            ],
            options={
                "verbose_name": "Scheduled task (Advanced)",
                "verbose_name_plural": "Scheduled tasks (Advanced)",
            },
        ),
        migrations.CreateModel(
            name="Timesheet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("time_start", models.DateTimeField(default=django.utils.timezone.now)),
                ("time_end", models.DateTimeField(default=django.utils.timezone.now)),
                ("meal_break_mins", models.PositiveIntegerField(blank=True, default=0)),
                ("rest_break_mins", models.PositiveIntegerField(blank=True, default=0)),
                ("shift_notes", models.TextField(blank=True)),
                ("pay_rate", models.IntegerField(blank=True, default=0)),
                ("pay_hours", models.FloatField(blank=True, default=0)),
                ("timesheet_notes", models.TextField(blank=True)),
                ("approved", models.BooleanField(blank=True, default=True)),
                (
                    "approved_time",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="peddleconcept.person",
                    ),
                ),
                (
                    "roster",
                    models.ForeignKey(
                        help_text="Associated rostered shift object, if any",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="peddleconcept.roster",
                    ),
                ),
            ],
        ),
        migrations.AlterModelOptions(
            name="riderpayslot",
            options={
                "verbose_name": "Rider Pay Slot (Advanced)",
                "verbose_name_plural": "Rider Pay Slots (Advanced)",
            },
        ),
        migrations.AlterModelOptions(
            name="session",
            options={"verbose_name": "Tour Session"},
        ),
        migrations.AlterModelOptions(
            name="settings",
            options={
                "verbose_name": "Settings (Advanced)",
                "verbose_name_plural": "Settings (Advanced)",
            },
        ),
        migrations.AlterModelOptions(
            name="tourrider",
            options={
                "verbose_name": "Tour Rider (Advanced)",
                "verbose_name_plural": "Tour Riders (Advanced)",
            },
        ),
        migrations.AlterModelOptions(
            name="tourvenue",
            options={
                "verbose_name": "Tour Venue (Advanced)",
                "verbose_name_plural": "Tour Venues (Advanced)",
            },
        ),
        migrations.RemoveField(
            model_name="riderpayslot",
            name="rowset",
        ),
        migrations.RemoveField(
            model_name="session",
            name="rowset",
        ),
        migrations.RemoveField(
            model_name="tour",
            name="rowset",
        ),
        migrations.RemoveField(
            model_name="tourrider",
            name="rowset",
        ),
        migrations.RemoveField(
            model_name="tourrider",
            name="session",
        ),
        migrations.RemoveField(
            model_name="tourvenue",
            name="rowset",
        ),
        migrations.RemoveField(
            model_name="tourvenue",
            name="session",
        ),
        migrations.AddField(
            model_name="riderpayslot",
            name="created",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="riderpayslot",
            name="updated",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="session",
            name="created",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="session",
            name="session_note",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="session",
            name="updated",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="tour",
            name="created",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="tour",
            name="updated",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="tourrider",
            name="created",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="tourrider",
            name="updated",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="tourvenue",
            name="created",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="tourvenue",
            name="updated",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name="riderpayslot",
            name="field_auto_values",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="External/automatic values for each of the fields",
            ),
        ),
        migrations.AlterField(
            model_name="riderpayslot",
            name="source",
            field=models.CharField(
                blank=True,
                choices=[
                    ("rezdy", "rezdy"),
                    ("fringe", "fringe"),
                    ("", ""),
                    ("auto", "auto"),
                    ("generate_sessions", "generate_sessions"),
                    ("generate_pay_report", "generate_pay_report"),
                    ("user", "user"),
                ],
                help_text="External data source",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="riderpayslot",
            name="source_row_id",
            field=models.CharField(
                blank=True,
                help_text="External ID for this item (eg. Rezdy/Fringe booking number)",
                max_length=300,
            ),
        ),
        migrations.AlterField(
            model_name="riderpayslot",
            name="source_row_state",
            field=models.CharField(
                blank=True,
                choices=[("live", "live"), ("deleted", "deleted"), ("none", "none")],
                default="live",
                help_text="Whether the external data item exists (live) or has been deleted, eg. for a cancelled tour",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="session",
            name="field_auto_values",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="External/automatic values for each of the fields",
            ),
        ),
        migrations.AlterField(
            model_name="session",
            name="source",
            field=models.CharField(
                blank=True,
                choices=[
                    ("rezdy", "rezdy"),
                    ("fringe", "fringe"),
                    ("", ""),
                    ("auto", "auto"),
                    ("generate_sessions", "generate_sessions"),
                    ("generate_pay_report", "generate_pay_report"),
                    ("user", "user"),
                ],
                help_text="External data source",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="session",
            name="source_row_id",
            field=models.CharField(
                blank=True,
                help_text="External ID for this item (eg. Rezdy/Fringe booking number)",
                max_length=300,
            ),
        ),
        migrations.AlterField(
            model_name="session",
            name="source_row_state",
            field=models.CharField(
                blank=True,
                choices=[("live", "live"), ("deleted", "deleted"), ("none", "none")],
                default="live",
                help_text="Whether the external data item exists (live) or has been deleted, eg. for a cancelled tour",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="session",
            name="time_end",
            field=models.DateTimeField(
                blank=True, default=django.utils.timezone.now, null=True
            ),
        ),
        migrations.AlterField(
            model_name="session",
            name="time_start",
            field=models.DateTimeField(
                blank=True, default=django.utils.timezone.now, null=True
            ),
        ),
        migrations.AlterField(
            model_name="session",
            name="title",
            field=models.TextField(
                blank=True,
                help_text="Session title to show on the Tour Schedule including time and tour type",
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="bikes",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="How many of each type of bike used for this tour. Edit this via the schedule",
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="customer_contact",
            field=models.TextField(
                blank=True,
                help_text="Customer contact telephone as displayed on schedule (updated automatically)",
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="customer_name",
            field=models.TextField(
                blank=True,
                help_text="Customer name as displayed on schedule (updated automatically)",
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="field_auto_values",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="External/automatic values for each of the fields",
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="notes",
            field=models.TextField(
                blank=True,
                help_text="Notes to show on tour, including any Booking Notes (not including venues)",
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="pax",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="Number of people on the tour (if applicable)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="pickup_location",
            field=models.TextField(
                blank=True,
                help_text="Pickup location as displayed on schedule (updated automatically)",
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="quantity",
            field=models.TextField(
                blank=True,
                help_text="Tour booking quantity as displayed on schedule (updated automatically)",
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="session",
            field=models.ForeignKey(
                help_text="Which session this tour is displayed under",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tours",
                to="peddleconcept.session",
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="show_venues",
            field=models.BooleanField(
                blank=True,
                default=True,
                help_text="Add automatic venue summary to notes if any venues are defined",
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="source",
            field=models.CharField(
                blank=True,
                choices=[
                    ("rezdy", "rezdy"),
                    ("fringe", "fringe"),
                    ("", ""),
                    ("auto", "auto"),
                    ("generate_sessions", "generate_sessions"),
                    ("generate_pay_report", "generate_pay_report"),
                    ("user", "user"),
                ],
                help_text="External data source",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="source_row_id",
            field=models.CharField(
                blank=True,
                help_text="External ID for this item (eg. Rezdy/Fringe booking number)",
                max_length=300,
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="source_row_state",
            field=models.CharField(
                blank=True,
                choices=[("live", "live"), ("deleted", "deleted"), ("none", "none")],
                default="live",
                help_text="Whether the external data item exists (live) or has been deleted, eg. for a cancelled tour",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="time_end",
            field=models.DateTimeField(
                default=django.utils.timezone.now,
                help_text="Tour end time (updated automatically)",
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="time_start",
            field=models.DateTimeField(
                default=django.utils.timezone.now,
                help_text="Tour start time (updated automatically)",
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="tour_date",
            field=models.DateField(
                blank=True,
                default=datetime.date.today,
                help_text="Tour date (updated automatically)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="tour",
            name="tour_type",
            field=models.CharField(
                blank=True,
                help_text="Tour type (updated automatically)",
                max_length=500,
            ),
        ),
        migrations.AlterField(
            model_name="tourrider",
            name="field_auto_values",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="External/automatic values for each of the fields",
            ),
        ),
        migrations.AlterField(
            model_name="tourrider",
            name="source",
            field=models.CharField(
                blank=True,
                choices=[
                    ("rezdy", "rezdy"),
                    ("fringe", "fringe"),
                    ("", ""),
                    ("auto", "auto"),
                    ("generate_sessions", "generate_sessions"),
                    ("generate_pay_report", "generate_pay_report"),
                    ("user", "user"),
                ],
                help_text="External data source",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="tourrider",
            name="source_row_id",
            field=models.CharField(
                blank=True,
                help_text="External ID for this item (eg. Rezdy/Fringe booking number)",
                max_length=300,
            ),
        ),
        migrations.AlterField(
            model_name="tourrider",
            name="source_row_state",
            field=models.CharField(
                blank=True,
                choices=[("live", "live"), ("deleted", "deleted"), ("none", "none")],
                default="live",
                help_text="Whether the external data item exists (live) or has been deleted, eg. for a cancelled tour",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="tourvenue",
            name="field_auto_values",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="External/automatic values for each of the fields",
            ),
        ),
        migrations.AlterField(
            model_name="tourvenue",
            name="source",
            field=models.CharField(
                blank=True,
                choices=[
                    ("rezdy", "rezdy"),
                    ("fringe", "fringe"),
                    ("", ""),
                    ("auto", "auto"),
                    ("generate_sessions", "generate_sessions"),
                    ("generate_pay_report", "generate_pay_report"),
                    ("user", "user"),
                ],
                help_text="External data source",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="tourvenue",
            name="source_row_id",
            field=models.CharField(
                blank=True,
                help_text="External ID for this item (eg. Rezdy/Fringe booking number)",
                max_length=300,
            ),
        ),
        migrations.AlterField(
            model_name="tourvenue",
            name="source_row_state",
            field=models.CharField(
                blank=True,
                choices=[("live", "live"), ("deleted", "deleted"), ("none", "none")],
                default="live",
                help_text="Whether the external data item exists (live) or has been deleted, eg. for a cancelled tour",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="tourvenue",
            name="tour",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="venues",
                to="peddleconcept.tour",
            ),
        ),
        migrations.AlterField(
            model_name="venue",
            name="contact_email",
            field=models.EmailField(
                blank=True,
                help_text="Contact Email to display on Venue Bookings summary",
                max_length=254,
            ),
        ),
        migrations.AlterField(
            model_name="venue",
            name="contact_name",
            field=models.CharField(
                blank=True,
                help_text="Contact Name for bar to display on Venue Bookings summary",
                max_length=100,
            ),
        ),
        migrations.AlterField(
            model_name="venue",
            name="drink_special",
            field=models.CharField(
                blank=True,
                help_text="Specials/Notes to auto-fill in the schedule",
                max_length=100,
            ),
        ),
        migrations.AlterField(
            model_name="venue",
            name="name",
            field=models.CharField(
                help_text="Name of venue to show on schedules & in the editor",
                max_length=200,
            ),
        ),
        migrations.DeleteModel(
            name="RowSet",
        ),
        migrations.AddField(
            model_name="rostertour",
            name="tour",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="peddleconcept.tour"
            ),
        ),
        migrations.AddField(
            model_name="riderpayslot",
            name="person",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="peddleconcept.person",
            ),
        ),
        migrations.AddField(
            model_name="tour",
            name="tour_area",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="peddleconcept.area",
            ),
        ),
        migrations.AddField(
            model_name="tourrider",
            name="person",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="peddleconcept.person",
            ),
        ),
        migrations.AddField(
            model_name="venue",
            name="venue_area",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="peddleconcept.area",
            ),
        ),
        migrations.AddIndex(
            model_name="changelog",
            index=models.Index(
                fields=["model_type", "model_id"], name="peddleconce_model_t_2f4c42_idx"
            ),
        ),
        migrations.RunPython(
            make_riders_people
        ),
        migrations.RemoveField(
            model_name="riderpayslot",
            name="rider",
        ),
        migrations.RemoveField(
            model_name="tourrider",
            name="rider",
        ),
        migrations.RunPython(
            delete_rider_users
        ),
    ]
