# Generated by Django 4.1.1 on 2023-04-13 04:08

import accounts.models
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="PeddleUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        max_length=128, null=True, verbose_name="password"
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        null=True,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "abn",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="Rider ABN"
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        verbose_name="Phone Number",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        blank=True,
                        help_text="Name which is displayed on Tour Schedules",
                        max_length=30,
                        null=True,
                        verbose_name="Display Name",
                    ),
                ),
                ("is_rider", models.BooleanField(blank=True, default=False)),
                (
                    "login_token",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Enter a long, random string to enable passwordless login for this user. WARNING: Using the token, it is possible to get all permissions of this user, including the Admin Site!",
                        max_length=256,
                        null=True,
                        verbose_name="Login Token",
                    ),
                ),
                (
                    "rider_pay_rate",
                    models.PositiveIntegerField(
                        blank=True,
                        default=None,
                        help_text="Set a fixed pay rate to ignore tour/role pay rates and use the fixed rate instead. (eg. for noobs & senior staff)",
                        null=True,
                        verbose_name="Fixed Pay Rate",
                    ),
                ),
                (
                    "bank_acct",
                    models.CharField(
                        blank=True,
                        help_text="Account Number for Tour Pay",
                        max_length=20,
                        null=True,
                        verbose_name="Account Number",
                    ),
                ),
                (
                    "bank_bsb",
                    models.CharField(
                        blank=True,
                        help_text="BSB for Tour Pay",
                        max_length=10,
                        null=True,
                        verbose_name="BSB",
                    ),
                ),
                (
                    "rider_priority",
                    models.PositiveIntegerField(
                        choices=[
                            (10, "New rider (noob)"),
                            (20, "Junior rider"),
                            (30, "Intermediate rider"),
                            (40, "Advanced rider"),
                            (50, "Senior rider"),
                        ],
                        default=30,
                        help_text="More senior riders are chosen before less senior ones when making rosters",
                        verbose_name="Rider Shift Priority",
                    ),
                ),
            ],
            options={
                "verbose_name": "All User Accounts",
                "abstract": False,
                "verbose_name_plural": "All User Accounts",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="PeddleRider",
            fields=[],
            options={
                "verbose_name": "Rider",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("accounts.peddleuser",),
        ),
        migrations.CreateModel(
            name="PeddleWebUser",
            fields=[],
            options={
                "verbose_name": "Website Login",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("accounts.peddleuser",),
        ),
    ]
